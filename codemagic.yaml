# Check out https://docs.codemagic.io/yaml/building-a-react-native-app/ for more information
# Please review and update values

# TODO --- look at SHH build by passing flag

definitions: 

  instance_mac_pro: &instance_mac_pro
    instance_type: mac_mini_m2
    max_build_duration: 60

  env_versions: &env_versions
    # node: 16.9.0
    xcode: 14.2
    cocoapods: default
    # FYI Using custom ruby version increases build time dramatically
  ios_artifacts:
    - &ipa build/ios/ipa/*.ipa
    - &xcode_log /tmp/xcodebuild_logs/*.log
    - &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app

  android_artifacts:
    - &bundle android/app/build/outputs/**/*.aab
    - &apk android/app/build/outputs/**/*.apk

  email_release: &email_release
    email:
      recipients:
        - francis@coastr.com
        - rajesh@coastr.com
      notify:
        success: true
        failure: true

  email_develop: &email_develop
    email:
      recipients:
        - francis@coastr.com
        - rajesh@coastr.com
      notify:
        success: true
        failure: true    

  email_qa: &email_qa
    email:
      recipients:
        - francis@coastr.com
        - rajesh@coastr.com
        - harish@coastr.com
        - nishtha@coastr.com
        - karthik@coastr.com
        - siddesh@coastr.com
      notify:
        success: true
        failure: true    

  scripts:
    - &setup_amplify 
      name: Setup Amplify 
      script: |
        npm install -g @aws-amplify/cli
        bash scripts/amplifySetup.sh
      
    - &setup_appcenter 
      name: Setup Appcenter
      script: |
        echo "Injecting secrets..."
        # echo "Updating Google JSON"
        # echo $GOOGLE_SERVICES_JSON | base64 --decode > "$CM_BUILD_DIR/android/app/google-services.json"
        # echo "Updating Google plist"
        # echo $GOOGLE_SERVICES_PLIST | base64 --decode > "$CM_BUILD_DIR/ios/GoogleService-Info.plist"
        echo "Updating android secret"
        echo $APPCENTER_ANDROID_SECRET | base64 --decode > "$CM_BUILD_DIR/android/app/src/main/assets/appcenter-config.json"
        echo "Updating iOS secret"
        echo $APPCENTER_IOS_SECRET | base64 --decode > "$CM_BUILD_DIR/ios/AppCenter-Config.plist"
        echo "Finished injecting secrets."

    - &setup_rn_env_default
      name: Setup env
      script: |
        # Creates an .env from ENV variables for use with react-native-config
        cd $CM_BUILD_DIR
        ENV_WHITELIST=${ENV_WHITELIST:-"^RN_"}
        printf "Creating an .env file with the following whitelist:\n"
        printf "%s\n" $ENV_WHITELIST
        set | egrep -e $ENV_WHITELIST | sed 's/^RN_//g' > rn-default.env
        printf "\n.env created with contents:\n\n"
        cat rn-default.env

    
    - &install_npm
      name: Install npm dependencies
      script: |
        yarn install

    - &check_gql
      name: Running GQL Schema checks
      script: |
        yarn generate-gql

  ios_scripts:
    - &ios_initialize_keychain
      name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
      script: |
        keychain initialize
    - &fetch_signing_files
      name: Fetch signing files
      script: |
        app-store-connect fetch-signing-files "$BUNDLE_IDENTIFIER" --type IOS_APP_STORE --create
    - &add_certs_to_keychain
      name: Add certs to keychain
      script: |
        keychain add-certificates
    - &use_profiles
      name: Set up code signing settings on Xcode project
      script: |
        xcode-project use-profiles --warn-only
    - &increment_ios_build_number
      name: Increment build number
      script: |
        #!/bin/sh
        set -e
        set -x
        cd $FCI_BUILD_DIR/ios
        agvtool new-version -all $(($BUILD_NUMBER + 1))
        agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_ID") + 1))
    - &build_ipa
      name: Build ipa
      script: |
        xcode-project build-ipa --workspace "$FCI_BUILD_DIR/ios/$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME" 
    - &install_pods
      name: Install CocoaPods dependencies
      script: |
        gem install bundle
        cd ios && pod install

  android_scripts:
    - &set_android_sdk
      name: Set Android SDK location
      script: |
        echo "sdk.dir=$ANDROID_SDK_ROOT" > "$FCI_BUILD_DIR/android/local.properties"
    
    - &bundle_release
      name: Build Android release AAB
      script: |
        # Set environment variable so it can be used to increment build number in android/app/build.gradle
        # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
        # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$BUNDLE_IDENTIFIER" --tracks=alpha) + 1))
        export LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$BUNDLE_IDENTIFIER") + 1))
        cd android && ./gradlew bundleRelease

    - &release_apk
      name: Build Android release APK
      script: |
        # Set environment variable so it can be used to increment build number in android/app/build.gradle
        # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
        # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$BUNDLE_IDENTIFIER" --tracks=alpha) + 1))
        export LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$BUNDLE_IDENTIFIER") + 1))
        cd android && ./gradlew assembleRelease
        
    - &qa_release_apk
      name: Build Android release APK
      script: |
        # Set environment variable so it can be used to increment build number in android/app/build.gradle
        # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
        # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$BUNDLE_IDENTIFIER" --tracks=alpha) + 1))
        export LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$BUNDLE_IDENTIFIER") + 1))
        cd android && ./gradlew assembleRelease

  whitelabelling:
    # TODO - Add script to download assets from GDrive and copy them to relevant places
    - &download_whitelabel_assets
      name: Download Assets to tmp folder
      script: |
        sudo pip3 install awscli --upgrade
        aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" --profile default
        aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile default
        aws configure set region "$AWS_REGION" --profile default
        aws s3 cp s3://coastr-customer-mobile-app-whitelabelling/$CLIENT_ID /tmp/whitelabels/$CLIENT_ID --recursive
  
    - &prepare_build_assets
      name: Whitelabel the base App
      script: |
        bundle install
        # sudo gem install fastlane
        bundle exec fastlane prepare_build_codemagic wl_id:$CLIENT_ID
    - &ios_prepare_build_machine
      name: Prepare the build machine with required iOS envs
      script: |
        # Creates iOS creds
        source $CM_BUILD_DIR/scripts/prepare-ios-ci.sh

    - &android_prepare_build_machine
      name: Prepare the build machine with required Android envs
      script: |
        # creates GCLOUD_SERVICE_ACCOUNT
        
        source /tmp/whitelabels/$CLIENT_ID/deployment.env
        
        echo "Setting for $WHITE_LABEL_NAME"

        echo 'GCLOUD_SERVICE_ACCOUNT_CREDENTIALS<<DELIMITER' >> $CM_ENV
        echo "$GCLOUD_SERVICE_ACCOUNT_CREDENTIALS" >> $CM_ENV
        echo 'DELIMITER' >> $CM_ENV


    - &ios_setup_deployment_env
        name: Set value from deployment.env
        script: |
        
          source /tmp/whitelabels/$CLIENT_ID/deployment.env

          echo "Setting for $WHITE_LABEL_NAME"

          echo "XCODE_PROJECT_NAME=$XCODE_PROJECT_NAME" >> $CM_ENV
          echo "XCODE_SCHEME=$XCODE_SCHEME" >> $CM_ENV
          echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> $CM_ENV
          echo "APP_ID=$APP_ID" >> $CM_ENV

          echo "APP_STORE_CONNECT_KEY_IDENTIFIER=$APP_STORE_CONNECT_KEY_IDENTIFIER" >> $CM_ENV
          echo "APP_STORE_CONNECT_ISSUER_ID=$APP_STORE_CONNECT_ISSUER_ID" >> $CM_ENV

          echo "APP_STORE_CONNECT_PRIVATE_KEY<<DELIMITER" >> $CM_ENV
          echo "$APP_STORE_CONNECT_PRIVATE_KEY" >> $CM_ENV
          echo "DELIMITER" >> $CM_ENV

          # echo "CERTIFICATE_PRIVATE_KEY<<DELIMITER" >> $CM_ENV
          # echo "$CERTIFICATE_PRIVATE_KEY" >> $CM_ENV
          # echo "DELIMITER" >> $CM_ENV

workflows:
  release-android:
      name: Android Production
      <<: *instance_mac_pro
      cache:
        cache_paths:
          - $HOME/.gradle/caches
      environment:
            groups:
              - cross_platform
              - aws_config
              - amplify
              - dummy_credentials
              - rn_config_group
              - rn_config
            <<: *env_versions
            vars:
              CLIENT_ID: "$CLIENT_ID" # <-- Send this via API
              GCLOUD_SERVICE_ACCOUNT_CREDENTIALS_HOLDER: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
      scripts:
          - *setup_amplify
          - *install_npm
          - *setup_rn_env_default

          - *download_whitelabel_assets

          - *android_prepare_build_machine

          - *prepare_build_assets

          - *set_android_sdk
          - *bundle_release

      artifacts:
          - *bundle
      publishing:
          <<: *email_release
          google_play:
            credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS_HOLDER
            track: production   # Any default or custom track that is not in draft status!
            submit_as_draft: false # Optional boolean. Publish artifacts under a draft release. Can not be used together with rollout_fraction. Defaults to false



  release-ios:
      name: iOS Production
      <<: *instance_mac_pro
      cache:
        cache_paths:
          - $HOME/Library/Caches/CocoaPods
      environment:
          groups:
            - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY - Put your Certificate Private Key here)
            - cross_platform
            - aws_config
            - amplify
            - dummy_credentials
            - rn_config_group
            - rn_config

          <<: *env_versions
          vars:
              CLIENT_ID: "$CLIENT_ID" # <-- Send this via API
              APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
              APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
              APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
      scripts:
          - *setup_amplify
          - *install_npm
          - *setup_rn_env_default

          - *download_whitelabel_assets
                      
          - *ios_setup_deployment_env

          - *prepare_build_assets

          - *install_pods
          - *ios_initialize_keychain
          - *fetch_signing_files
          - *add_certs_to_keychain
          - *use_profiles
          - *increment_ios_build_number
          - *build_ipa
      artifacts:
          - *ipa
          - *xcode_log
          - *dsym
          - *app

      publishing:
          <<: *email_release

          app_store_connect:                 
            api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
            key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
            issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
            submit_to_testflight: false                     # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
            submit_to_app_store: true # Optional boolean, defaults to false. Whether or not to submit the uploaded build to App Store review. Note: This action is performed during post-processing.
            release_type: MANUAL # Optional, defaults to MANUAL. Supported values: MANUAL, AFTER_APPROVAL or SCHEDULED
            # earliest_release_date: 2021-12-01T14:00:00+00:00 # Optional. Timezone-aware ISO8601 timestamp with hour precision when scheduling the release. This can be only used when release type is set to SCHEDULED. It cannot be set to a date in the past.

  pilot-ios:
      name: iOS Production Pilot
      <<: *instance_mac_pro
      cache:
        cache_paths:
          - $HOME/Library/Caches/CocoaPods
      environment:
          groups:
            - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY - Put your Certificate Private Key here)
            - cross_platform
            - aws_config
            - amplify
            - dummy_credentials
            - rn_config_group
            - rn_config

          <<: *env_versions
          vars:
              CLIENT_ID: "$CLIENT_ID" # <-- Send this via API
              APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
              APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
              APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
      scripts:
          - *setup_amplify
          - *install_npm
          - *setup_rn_env_default

          - *download_whitelabel_assets
                      
          - *ios_setup_deployment_env

          - *prepare_build_assets

          - *install_pods
          - *ios_initialize_keychain
          - *fetch_signing_files
          - *add_certs_to_keychain
          - *use_profiles
          - *increment_ios_build_number
          - *build_ipa
      artifacts:
          - *ipa
          - *xcode_log
          - *dsym
          - *app

      publishing:
          <<: *email_release
          app_store_connect:                 
            api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
            key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
            issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
  
  pilot-android:
      name: Android Pilot
      <<: *instance_mac_pro
      cache:
        cache_paths:
          - $HOME/.gradle/caches
      environment:
            groups:
              - cross_platform
              - aws_config
              - amplify
              - dummy_credentials
              - rn_config_group
              - rn_config

            <<: *env_versions

            vars:
              CLIENT_ID: "$CLIENT_ID" # <-- Send this via API
      scripts:
          - *setup_amplify
          - *install_npm
          - *setup_rn_env_default

          - *download_whitelabel_assets

          - *prepare_build_assets

          - *set_android_sdk
          - *release_apk

      artifacts:
          - *apk
      publishing:
          <<: *email_develop
  
  testing-android:
      name: Android Testing
      <<: *instance_mac_pro
      cache:
        cache_paths:
          - $HOME/.gradle/caches
      environment:
            groups:
              - cross_platform
              - aws_config
              - amplify
              - dummy_credentials
              - rn_config_group
              - rn_config
              - rn_config_testing
              - discord
              - gql_acc

            <<: *env_versions

            vars:
              CLIENT_ID: "CoastrQA" # <-- Send this via API
              AMPLIFY_ENV: "testing"
      triggering:
        events:
          - push
        branch_patterns: 
          - pattern: testing
            include: true
        cancel_previous_builds: true
      scripts:
          - *setup_amplify
          - *install_npm
          - *setup_rn_env_default

          - *download_whitelabel_assets

          - *prepare_build_assets

          - *check_gql

          - *set_android_sdk
          - *qa_release_apk

      artifacts:
          - *apk
      publishing:
          <<: *email_qa
  
  testing-ios:
      name: iOS Testing
      <<: *instance_mac_pro
      cache:
        cache_paths:
          - $HOME/Library/Caches/CocoaPods
      environment:
          groups:
            - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY - Put your Certificate Private Key here)
            - cross_platform
            - aws_config
            - amplify
            - dummy_credentials
            - rn_config_group
            - rn_config
            - rn_config_testing
            - discord
            - gql_acc

          <<: *env_versions
          vars:
              CLIENT_ID: "CoastrQA" # <-- Send this via API
              AMPLIFY_ENV: "testing"
              APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
              APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
              APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
      triggering:
        events:
          - push
        branch_patterns: 
          - pattern: testing
            include: true
        cancel_previous_builds: true
      scripts:
          - *setup_amplify
          - *install_npm
          - *setup_rn_env_default
          - *download_whitelabel_assets
          - *ios_setup_deployment_env
          - *prepare_build_assets
          - *check_gql
          - *install_pods
          - *ios_initialize_keychain
          - *fetch_signing_files
          - *add_certs_to_keychain
          - *use_profiles
          - *increment_ios_build_number
          - *build_ipa
      artifacts:
          - *ipa
          - *xcode_log
          - *dsym
          - *app

      publishing:
          <<: *email_develop
          app_store_connect:                 
            api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
            key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
            issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
            submit_to_testflight: false                     # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
            # beta_groups:                                  # Specify the names of beta tester groups that will get access to the build once it has passed beta review. 
            #      - group name 1
            #      - group name 2  
