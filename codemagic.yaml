workflows:
    trigger:
      name: trigger builds for different branches
      environment:
        groups:
          - firebase_credentials
          - google_play_credentials2
          - token
      scripts:
        - name: Trigger multiple client builds
          script: |
            WORKFLOW="android-workflow"  # Replace with your workflow ID
            APP_ID="645a0fafc5f77d006a400bf1"  # Replace with your App ID

            # Define an array of branch names
            BRANCHES=("main" "master" "dev")

            for BRANCH in ${BRANCHES[@]}; do
              echo "Triggering workflow $WORKFLOW for branch $BRANCH"

              Make the POST request to trigger the build for the current branch
              curl -H "Content-Type: application/json" -H "x-auth-token: $CM_API_KEY" \
                --data '{
                  "appId": "645a0fafc5f77d006a400bf1",
                  "workflowId": "android-workflow",
                  "branch": "'${BRANCH}'",
                  "environment": {
                      "variables": {
                          "PACKAGE_NAME": "io.codemagic.dtrdic6"
                      }
                  }
                }' \
                https://api.codemagic.io/builds
            done

    android-workflow:
        name: Android Workflow
        max_build_duration: 120
        instance_type: mac_mini_m1
        environment:
          #java: 17
          android_signing: 
            - testKeystore
          groups:
            - shorebird_token
            - firebase_credentials 
            - google_credentials3
            - github_token
            - railway_token
          vars:
            PACKAGE_NAME: "io.codemagic.dtrdic6"
            GOOGLE_PLAY_TRACK: internal 
        # triggering:
        #   events:
        #     - push
        #   branch_patterns: 
        #     - pattern: "main"
        #       include: true 
        #       source: true #test12test test2test3
          # tag_patterns:
          #   - include: true
          #     pattern: firebase-*
        # when:
        #   condition: (not event.pull_request.draft) and not (event.pull_request.head.ref == "TestPR")

        scripts:   
          - name: Set up local.properties
            script: |
              echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          - name: Get Flutter packages
            script: |
              flutter packages pub get
          - name: Build AAB with Flutter
            script: |
              LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))
              if [ -z $LATEST_GOOGLE_PLAY_BUILD_NUMBER ]; then
                UPDATED_BUILD_NUMBER=$BUILD_NUMBER
              else
                UPDATED_BUILD_NUMBER=$(($LATEST_GOOGLE_PLAY_BUILD_NUMBER + 1))
              fi
              flutter build appbundle --release \
                --build-name=1.0.$UPDATED_BUILD_NUMBER \
                --build-number=$UPDATED_BUILD_NUMBER
                # --obfuscate \
                # --split-debug-info \
                #ovaj obsuficate napravi 3 fajla(debug symbols) u Clone/debug-info floder 
          # - name: Launch Custom Android Emulator
          #   script: | 
          #       export PATH="$PATH":"$ANDROID_HOME/cmdline-tools/latest/bin"
          #       echo y | sdkmanager "system-images;android-33;google_apis;x86_64"
          #       echo no | avdmanager create avd -n emulator -k "system-images;android-33;google_apis;x86_64" --name "EWEGO_EMUL_API_33" -n Android33 --package "system-images;android-33;google_apis;x86_64" --tag "google_apis" --device "Galaxy Nexus"

          #       emulator -memory 2048 -avd Android33 -no-audio -gpu swiftshader_indirect -debug-init -wipe-data &   
          #       adb wait-for-device
          # - name: Rename the aab file
          #   script: | 
          #     mv build/app/outputs/bundle/release/app-release.aab \
          #       build/app/outputs/bundle/release/my_renamed_binary_name-release.aab
        artifacts:
          - build/**/outputs/**/*.aab
          - build/app/outputs/apk/release/app-release.apk
          - build/app/outputs/bundle/release/my_renamed_binary_name-release.aab
          - build/**/outputs/**/mapping.txt
          - flutter_drive.log
          - debug-info.zip
        publishing:
          firebase:
              firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
              android:
                app_id: 1:701760780130:android:78886c544e828688f09e3b
          email:
            recipients:
              - david@nevercode.io
          google_play:
            credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS3
            track: internal
            changes_not_sent_for_review: true
            submit_as_draft: false
          scripts:
            - name: Check publishing status
              script: | 
                PUBLISHING_STATUS=$(curl -H "Content-Type: application/json" \
                    -H "x-auth-token: $GITHUB_TOKEN" \
                    --request GET https://api.codemagic.io/builds/$CM_BUILD_ID | jq '.build.buildActions[] | select (.type == "publishing") | .status')
                echo "PUBLISHING_STATUS is: $PUBLISHING_STATUS"

                if [ "$PUBLISHING_STATUS" == "success" ] ; then
                  echo "do what you want on success"
                else
                  echo "do what you want on failure"
                fi


    ios-workflow:
      name: iOS Workflow
      instance_type: mac_mini_m1
      max_build_duration: 120
      integrations:
        app_store_connect: DavidAPIkey 
      environment:
        #flutter: fvm
        #xcode: 14.2
        ios_signing:
          distribution_type: app_store
          bundle_identifier: io.codemagic.dtrdic6
        groups:
            - test_device
            - firebase_credentials
            - appstore_credentials ##ovo prije nije bilo iz nekog razloga a succesfgul build
        vars:
          APP_ID: 6450783332 # <-- Put your APP ID here 
      # triggering:
      #     events:
      #         - push
      #         - pull_request #test12dasd testtest22$test
      #     branch_patterns:
      #       - pattern: main
      #         include: true
      #         source: true 
      #       - pattern: release/*
      #         include: true
      #         source: true
          #cancel_previous_builds: true
      scripts:

        # - name: java 17 install
        #   script: |
        #     #brew update
        #     java --version
        #     brew install openjdk@17
        #     java --version
        # - name: set Java 17 as default
        #   script: |
        #     echo 'export JAVA_HOME="/usr/local/opt/openjdk@17"' >> ~/.zshrc
        #     echo 'export PATH="/usr/local/opt/openjdk@17/bin:$PATH"' >> ~/.zshrc
        # - name: java version
        #   script: |
        #     source ~/.zshrc
        #     java --version
        - name: quasar install
          script: |
            npm install -g @quasar/cli
        # - name: create new bundle id
        #   script: |
        #       app-store-connect bundle-ids create \
        #       com.test.FCMFCMNotificationServiceExtension
        - name: Set up code signing settings on Xcode project 
          script: |
            xcode-project use-profiles
        - name: Get Flutter packages
          script: | 
            flutter packages pub get
        - name: Install pods
          script: | 
            find . -name "Podfile" -execdir pod install \;
        # - name: Run tests
        #   script: | 
        #     xcode-project run-tests \
        #     --workspace "ios/Runner.xcworkspace" \
        #     --scheme "Runner" \
        #     --device "$TEST_DEVICE" \
        #     --test-flags="-quiet"
        - name: versioning
          script: | 
            LATEST_BUILD_NUMBER=$(($(app-store-connect get-latest-app-store-build-number "$APP_ID") + 1))
            cd ./ios
            agvtool new-version -all $(($LATEST_BUILD_NUMBER))
        - name: Flutter build ipa and automatic versioning
          script: |
            flutter build ipa --release \
              --build-name=1.0.$BUILD_NUMBER \
              --build-number=$BUILD_NUMBER \
              --export-options-plist=/Users/builder/export_options.plist \
              --flavor=free
      artifacts:
        - /tmp/xcodebuild_logs/*.log
        - /tmp/xcodebuild_logs/iosApp.log
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
        - build/ios/ipa/*.ipa
        - flutter_drive.log
       # - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        email:
          recipients:
            - david@nevercode.io
          notify:
            success: true # To receive a notification when a build succeeds
            failure: false # To not receive a notification when a build fails
        app_store_connect:
          auth: integration 
          submit_to_testflight: true
          #submit_to_app_store: true
          # beta_groups: 
          #   - sharks
        # firebase:
        #     firebase_service_account: $FIREBASE_SERVICE_ACCOUNT 
        #     ios:
        #       app_id: 1:701760780130:ios:d06fc5333b7c4ed3f09e3b
        # google_play:
        #     credentials: $GOOGLE_APPLICATION_CREDENTIALS
        #     track: internal
        scripts:
            - name: Upload debug symbols to Firebase Crashlytics
              script: | 
                echo "Find build artifacts"
                dsymPath=$(find $CM_BUILD_DIR/build/ios/archive/Runner.xcarchive -name "Runner.app.dSYM")
                if [[ -z ${dsymPath} ]]
                then
                  echo "No debug symbols were found, skip publishing to Firebase Crashlytics"
                else
                  echo "Publishing debug symbols from $dsymPath to Firebase Crashlytics"
                  ls -d -- ios/Pods/*
                  $CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols -gsp ios/Runner/GoogleService-Info.plist -p ios $dsymPath
                fi

    shorebird-workflow: 
        name: shorebird Workflow
        max_build_duration: 120
        instance_type: mac_mini_m1
        labels:
          - ${PACKAGE_NAME}
        environment:
          #flutter: fvm
          android_signing:
            - testKeystore
          groups:
            - shorebird_token
            - firebase_credentials
            - google_credentials3
          vars:
            PACKAGE_NAME: "io.codemagic.dtrdic6"
            GOOGLE_PLAY_TRACK: internal
        scripts:
          - name: Build aab
            script: | 
                flutter build appbundle 
          - name: 🐦 Setup Shorebird
            script: |
              # Install Shorebird
              curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash

              # Add Shorebird to PATH
              echo PATH="$HOME/.shorebird/bin:$PATH" >> $CM_ENV
          - name: 🚀 Shorebird INIT
            script:  shorebird init
          - name: 🚀 Shorebird release
            script:  shorebird release android
          - name: 🚀 Shorebird Patch
            script:  shorebird patch android --force
        
        artifacts:
          - build/**/outputs/**/*.aab
          - build/**/outputs/**/mapping.txt
          - flutter_drive.log
          - debug-info.zip
        publishing:
          # firebase:
          #     firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
          #     android:
          #       app_id: 1:701760780130:android:78886c544e828688f09e3b
          email:
            recipients:
              - david@nevercode.io
          google_play:
            credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS3
            track: internal
            changes_not_sent_for_review: true
            submit_as_draft: true

    windows-android-workflow:
        name: Windows publish Android Workflow
        max_build_duration: 120
        instance_type: linux_x2
        environment:
          android_signing:
            - testKeystore
          groups:
            - windows_credentials
            - google_credentials3
        triggering:
          events:
              - push
        #   branch_patterns:
        #   - pattern: "main"
        #     include: true
        #     source: false          
        scripts:
          - name: clang-cl
            script: | 
                sudo apt clang-cl 15.0.1
          - name: Get Flutter packages
            script: | 
                flutter packages pub get
          - name: Configure for Windows
            script: flutter config --enable-windows-desktop
          - name: Build Windows
            script: flutter build windows
          - name: Package Windows
            script: flutter pub run msix:create
          - name: Package Windows
            script: |
              flutter pub add msix
              flutter pub run msix:create --display-name='FlutterFvm' --publisher-display-name='FlutterFvm' --publisher='PublisherID' --identity-name='gizard.FlutterFVM' --version=1.0.0.0 --store=true
        
        artifacts:
          - build/windows/**/*.msix
        publishing:
          partner_center:
            store_id: $APP_ID # <-- You can find the `store_id` inside your Partner Center app by going to [Product management > Product Identity].
            tenant_id: $TENANT_ID # <-- You will get `tenant_id` from the Azure AD Overview page.
            client_id: $CLIENT_ID # <-- You will also get `client_id` from the Azure AD Overview page.
            client_secret: $CLIENT_SECRET # <-- `client_secret` is retrieved from the application environment variable
          email:
            recipients:
              - david@nevercode.io #test3


    windows-release-workflow:
        name: Windows .msixbundle bundle
        max_build_duration: 120
        instance_type: windows_x2
        environment:
          android_signing:
            - testKeystore
          groups:
            - windows_credentials
            - google_credentials3
        # triggering:
        #   events:
        #       - push
        #   branch_patterns:
        #   - pattern: "main"
        #     include: true
        #     source: false          
        scripts:
          - name: Force upgrade packages
            script: |
              flutter update-packages --force-upgrade
          - name: Get Flutter packages
            script: |
              flutter packages pub get
          - name: Build Windows and create MSIX package
            script: |
              dart run msix:create --store --windows-build-args="--dart-define=CLIENT_ID=$env:CLIENT_ID --dart-define=CLIENT_SECRET=$env:CLIENT_SECRET --dart-define=AUTH_API_URL=$env:AUTH_API_URL --dart-define=MOTIVIEW_API_URL=$env:MOTIVIEW_API_URL --dart-define=QR_ENCRYPTION_KEY=$env:QR_ENCRYPTION_KEY --dart-define=QR_ENCRYPTION_IV=$env:QR_ENCRYPTION_IV"
          - name: Create msixbundle for Microsoft Store
            script: |
              mkdir 'makeappx' ; cd ./makeappx
              git init
              git remote add -f origin https://github.com/microsoft/MSIX-Toolkit.git 
              git sparse-checkout init
              git sparse-checkout  set "WindowsSDK/10/10.0.20348.0/x64"
              git pull origin master
              mv .\WindowsSDK\10\10.0.20348.0\x64\ ..\make
              cd ..\make
              $commitHash = $env:CM_COMMIT.Substring(0, 7)
              $outputName = "motiview-$commitHash.msixbundle"
              $outputPath = "..\build\windows\x64\runner\Release\$outputName"
              .\makeappx.exe bundle /d "..\msix\" /p $outputPath /v
        artifacts:
          - build\windows\x64\runner\Release\*.msixbundle
        # publishing:
        #   partner_center:
        #     store_id: $WIN_STORE_ID # <-- You can find the `store_id` inside your Partner Center app by going to [Product management > Product Identity].
        #     tenant_id: $WIN_TENANT_ID # <-- You will get `tenant_id` from the Azure AD Overview page.
        #     client_id: $WIN_CLIENT_ID # <-- You will also get `client_id` from the Azure AD Overview page.
        #     client_secret: $WIN_CLIENT_SECRET # <-- `client_secret` is retrieved from the application environment variable

    discord-workflow:
      name: Discord integration Workflow
      instance_type: mac_mini_m1
      max_build_duration: 60
      environment:
        android_signing:
          - testKeystore
        groups:
          - discord_credentials 
        flutter: stable
        cocoapods: default 
      # triggering:
      #   events:
      #     - push
      scripts:        
        - name: set up local properties
          script: |
            echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
        - name: Get packages and build debug apk
          script: |
            flutter packages pub get && flutter build apk --debug
        - name: Create a changelog
          script: |
              if [[ -z ${CM_PREVIOUS_COMMIT} ]]
              then
                echo "No finished builds found to generate changelog" | tee release_notes.txt
              else
                echo "$(git-changelog generate --previous-commit $CM_PREVIOUS_COMMIT)" | tee release_notes.txt
              fi      
        - name:  exit code 1
          script: |
            exit code 1
      artifacts:
        - build/**/outputs/**/*.apk
        - build/**/outputs/**/*.aab
        - build/**/outputs/**/mapping.txt
        - flutter_drive.log
      publishing:
        scripts:
        - name: Discord notification
          script: |
            if [[ $CM_BUILD_STEP_STATUS == "failure" ]]; then
              # Handle the error case here
              echo "Here is the message for the failing step"
            else
              # Send the Discord notification as you did before
              set -ex

              APP_LINK=$(echo $CM_ARTIFACT_LINKS | jq -r '.[] | select(.name=="app.apk") | .url')

              # Get first 7 digits of commit number
              COMMIT=$(echo "${CM_COMMIT}" | sed 's/^\(........\).*/\1/;q')

              # Get commit message
              COMMIT_MESSAGE=$(git log --format=%B -n 1 $CM_COMMIT)

              # Get commit author
              AUTHOR=$(git show -s --format='%ae' $CM_COMMIT)

              curl -H "Content-Type: multipart/form-data" \
              -F 'payload_json={"username" : "codemagic-bot", "content": "**Commit:** `'"$COMMIT"'`\n\n**Commit message:** '"$COMMIT_MESSAGE"'\n\n**Branch:** '"$CM_BRANCH"'\n\n**Author:** '"$AUTHOR"'\n\n**Artifacts: **\n\n'"$APP_LINK"'\n\n"}' \
              -F "file1=@release_notes.txt" \
              $WEBHOOK_URL
            fi
          
        email:
          recipients:
            - david@nevercode.io

    web-workflow: 
        name: Web Workflow
        max_build_duration: 120
        #instance_type: linux_x2
        labels:
          - ${PACKAGE_NAME}
        environment:
          #flutter: fvm
          android_signing:
            - testKeystore
          groups:
            - firebase_credentials
            - google_credentials3
          vars:
            PACKAGE_NAME: "io.codemagic.dtrdic6"
            GOOGLE_PLAY_TRACK: internal
        scripts:
          - name: Get Flutter packages
            script: |
              flutter packages pub get
          - name: Flutter build webapp
            script: |
              flutter config --enable-web
              flutter build web --release
              cd $CM_BUILD_DIR/build/web
              7z a -r ../web.zip ./*
        
        artifacts:
          - $CM_BUILD_DIR/build/web.zip
          - flutter_drive.log
          - debug-info.zip
        #publishing:
          # firebase:
          #     firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
          #     android:
          #       app_id: 1:701760780130:android:78886c544e828688f09e3b
          # email:
          #   recipients:
          #     - david@nevercode.io
          # google_play:
          #   credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS3
          #   track: internal
          #   changes_not_sent_for_review: true
          #   submit_as_draft: true
