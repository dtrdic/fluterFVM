workflows:
    # trigger:
    #   name: trigger builds for all clients
    #   environment:
    #     groups:
    #       - firebase_credentials
    #       - google_play_credentials2
    #       - token
    #   scripts:
    #     - name: Trigger multiple client builds
    #       script: |
    #         # CLIENTS=(${PACKAGES})
    #         # for PACKAGE_NAME in ${PACKAGES[@]}; do
    #         #     echo "PACKAGE: $PACKAGE_NAME"
    #         #         curl -H "Content-Type: application/json" \
    #         #               -H "x-auth-token: <API Token>" \
    #         #               --data '{
    #         #                 "appId": "<app_id>",
    #         #                 "workflowId": "<workflow_id>",
    #         #                 "branch": "<git_branch_name>"
    #         #               }' \
    #         #               https://api.codemagic.io/builds
    #         #            curl --location 'https://api.codemagic.io/builds' --header "x-auth-token: ${CODEMAGIC_TOKEN}" --header 'Content-Type: application/json' --data  '{"appId": "645a0fafc5f77d006a400bf1", "workflowId": "android-workflow2", "environment": {"variables": {"PACKAGE_NAME": "'${PACKAGE_NAME}'"}}}'
    #         # done
    #         # Set your CodeMagic API key
    #         #   CM_API_KEY="YOUR_API_KEY"

    #         #   # Set the App ID for your project
    #         #   APP_ID="YOUR_APP_ID"

    #         #   Loop through each client and trigger a build
    #         #   for CLIENT in "${CLIENTS[@]}"; do
    #         #     echo "CLIENT: $CLIENT"
    #         #     curl -H "Content-Type: application/json" -H "x-auth-token: ${CM_API_KEY}" \
    #         #       --data '{
    #         #         "appId": "'${APP_ID}'",
    #         #         "workflowId": "ios-release",
    #         #         "branch": "main",
    #         #         "environment": {
    #         #           "variables": {
    #         #             "CLIENT_ID": "'${CLIENT}'"
    #         #           }
    #         #         }
    #         #       }' \
    #         #       https://api.codemagic.io/builds
    #         #   done

    #         WORKFLOWS=("android-workflow" "android-workflow2")
    #         for WORKFLOW in ${WORKFLOWS[@]}; do
    #           echo "WORKFLOW: $WORKFLOW"
    #           curl -H "Content-Type: application/json" -H "x-auth-token: ${CM_API_KEY}" \
    #             --data '{
    #               "appId": "645a0fafc5f77d006a400bf1",
    #               "workflowId":  "'${WORKFLOW}'",
    #               "branch": "main"
    #             }' \
    #             https://api.codemagic.io/builds
    #           done

    android-workflow:
        name: Android Workflow
        max_build_duration: 120
        instance_type: mac_mini_m1
        labels:
          - ${PACKAGE_NAME}
        environment:
          flutter: fvm
          node: 18
          android_signing:
            - testKeystore
          groups:
            - firebase_credentials
            - google_play_credentials2
          vars:
            BUILD_ANDROID: true
            BUILD_IOS: false
            XCODE_SCHEME: true
            CONFIG_ENV: true
            BUILD_ANDROID_APK: true
            PACKAGE_NAME: "io.codemagic.dtrdic6"
            GOOGLE_PLAY_TRACK: Wear OS Only
        triggering:
          events:
              #- pull_request 
              - push
          # branch_patterns:
          # - pattern: "main"
          #   include: true
          #   source: false
        scripts:
          # - name: Decode Google credentials 
          #   script: |
          #     echo $FIREBASE_SERVICE_ACCOUNT > $GOOGLE_APPLICATION_CREDENTIALS

          # - name: Edit JAVA OPTS
          #   script: |
          #     export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'
          #     # or
          #     # If the above code does not take effect, then export the java.xml.bind like below code.
          #     #export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.xml.bind'
         
          # - name: Install Android NDK
          #   script: |
          #       set -e
          #       set -x
          #       NDK_VERSION="android-ndk-r23c"
          #       NDK_URL="https://dl.google.com/android/repository/${NDK_VERSION}-linux.zip"
          #       NDK_DIR="android-ndk23"

          #       # Create the target directory
          #       mkdir -p ${NDK_DIR}

          #       # Download NDK
          #       curl -o ${NDK_VERSION}.zip ${NDK_URL}
          #       unzip -q ${NDK_VERSION}.zip -d ${NDK_DIR}
          #       rm ${NDK_VERSION}.zip

          #       # Set NDK environment variable
          #       export ANDROID_NDK_HOME=${NDK_DIR}/${NDK_VERSION}

          #       # Add NDK to PATH
          #       export PATH=${ANDROID_NDK_HOME}:$PATH

          #       # Print NDK version
          #       ndk-build --version

          # - name: SUpdate build tools with Android SDK manager
          #   script: |
          #     set -e
          #     set -x
          #     $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "build-tools;33.0.0" && cd /usr/local/share/android-sdk/build-tools/33.0.0 \
          #     && mv d8 dx \
          #     && cd lib \
          #     && mv d8.jar dx.jar

          # - name: Update build tools with Android SDK manager
          #   script: |
          #     # Set the Android home directory
          #     ANDROID_HOME="$HOME/android-sdk"

          #     # Set the download URL and file name
          #     SDK_TOOLS_VERSION="6200805"
          #     SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-${SDK_TOOLS_VERSION}_latest.zip"
          #     SDK_TOOLS_FILE="sdk-tools.zip"

          #     # Create the command-line tools directory
          #     CMDLINE_TOOLS_DIR="${ANDROID_HOME}/command-line-tools"
          #     mkdir -p "${CMDLINE_TOOLS_DIR}"

          #     # Download the SDK Command-line Tools
          #     curl -o "${SDK_TOOLS_FILE}" "${SDK_TOOLS_URL}"

          #     # Unpack the SDK Command-line Tools to the appropriate directory
          #     unzip -q "${SDK_TOOLS_FILE}" -d "${CMDLINE_TOOLS_DIR}"

          #     # Clean up the downloaded zip file
          #     rm "${SDK_TOOLS_FILE}"

          #     # Set the environment variables
          #     export ANDROID_SDK_ROOT="${CMDLINE_TOOLS_DIR}"
          #     export PATH="${ANDROID_SDK_ROOT}/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}"

          # - name: Install Firebase Crashlytics
          #   script: | 
          #     flutter pub add firebase_crashlytics

          - name: Echo test variables
            script: |
              echo "CONFIG_ENV - $CONFIG_ENV"
              echo "XCODE_SCHEME - $XCODE_SCHEME"
              echo "BUILD_ANDROID - $BUILD_ANDROID"
              echo "BUILD_ANDROID_APK - $BUILD_ANDROID_APK"
              echo "BUILD_IOS - $BUILD_IOS"
          - name: Log environment variables
            script: |
              echo "BUILD_IOS - $BUILD_IOS"
              echo "BUILD_ANDROID - $BUILD_ANDROID"
          - name: Set up local.properties
            script: |
              echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          - name: Get Flutter packages
            script: |
              flutter packages pub get
          - name: Build aab
            script: | 
                flutter build appbundle

          - name: Build AAB with Flutter
            script: |
              LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))
              if [ -z $LATEST_GOOGLE_PLAY_BUILD_NUMBER ]; then
                UPDATED_BUILD_NUMBER=$BUILD_NUMBER
              else
                UPDATED_BUILD_NUMBER=$(($LATEST_GOOGLE_PLAY_BUILD_NUMBER + 1))
              fi
              flutter build appbundle --release\
                --build-name=1.0.$UPDATED_BUILD_NUMBER \
                --build-number=$UPDATED_BUILD_NUMBER

                #flutter build appbundle --target-platform android-arm64


              #flutter build appbundle --obfuscate --split-debug-info=debug-info/

          # - name: Upload Debug Symbols to Google Play
          #   script: |
          #     # Upload the debug symbols zip file using the Google Play Developer API
          #     PACKAGE_NAME="io.codemagic.dtrdic6"
          #     TRACK="internal"
          #     BUILD_NUMBER="12345"

          #     curl -X POST \
          #       -H "Authorization: Bearer $FIREBASE_SERVICE_ACCOUNT" \
          #       -H "Content-Type: application/octet-stream" \
          #       --data-binary "@debug-symbols.zip" \
          #       "https://www.googleapis.com/upload/androidpublisher/v3/applications/$PACKAGE_NAME/edits/$TRACK/bundles/$BUILD_NUMBER?uploadType=media"

        artifacts:
          - build/**/outputs/**/*.aab
          - build/**/outputs/**/mapping.txt
          - flutter_drive.log
          #- $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        publishing:
          # firebase:
          #     firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
          #     android:
          #       app_id: 1:1037460898728:android:d0779b82fdcb0f3e95539d
          google_play:
            credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS2
            track: Wear OS Only
            changes_not_sent_for_review: true
            submit_as_draft: true
          # scripts:
          #   - name: Upload debug symbols to Firebase Crashlytics
          #     script: | 
          #       echo "Find build artifacts"
          #       dsymPath=$(find $CM_BUILD_DIR/build/ios/archive/Runner.xcarchive -name "*.dSYM" | head -1)
          #       if [[ -z ${dsymPath} ]]
          #       then
          #         echo "No debug symbols were found, skip publishing to Firebase Crashlytics"
          #       else
          #         echo "Publishing debug symbols from $dsymPath to Firebase Crashlytics"
          #         ls -d -- ios/Pods/*
          #         $CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols \
          #           -gsp ios/Runner/GoogleService-Info.plist -p ios $dsymPath
          #       fi

    ios-workflow:
      name: iOS Workflow
      instance_type: mac_mini_m1
      max_build_duration: 120
      integrations:
        app_store_connect: DavidAPIkey 
      environment:
        ios_signing:
          distribution_type: app_store
          bundle_identifier: io.codemagic.dtrdic6
        vars:
          APP_ID: 64915681451d0c4b9089af49 # <-- Put your APP ID here
        flutter: stable
        xcode: latest
        cocoapods: default
      scripts:
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Get Flutter packages
          script: | 
            flutter packages pub get
        - name: Install pods
          script: | 
            find . -name "Podfile" -execdir pod install \;
        - name: Flutter build ipa and automatic versioning
          script: |
            flutter build ipa --release \
              --build-name=1.0.0 \
              --build-number=$(($(app-store-connect get-latest-app-store-build-number "$APP_ID") + 1)) \
              --export-options-plist=/Users/builder/export_options.plist
      artifacts:
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log
        - flutter_drive.log
      publishing:
        # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
        email:
          recipients:
            - david@nevercode.io
          notify:
            success: true # To receive a notification when a build succeeds
            failure: false # To not receive a notification when a build fails
        app_store_connect:
          auth: integration
          
          # # Configuration related to TestFlight (optional)
          # # Note: This action is performed during post-processing.
          # submit_to_testflight: true
          # beta_groups: # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
          #   - group name 1
          #   - group name 2

          # # Configuration related to App Store (optional)
          # # Note: This action is performed during post-processing.
          # submit_to_app_store: false


    # ios-workflow:
    #   name: iOS Firebase Crashlytics
    #   max_build_duration: 120
    #   integrations:
    #     app_store_connect: codemagic
    #   environment:
    #     ios_signing:
    #       distribution_type: app_store
    #       bundle_identifier: io.codemagic.firebaseCrash
    #     vars:
    #       XCODE_WORKSPACE: "ios/Runner.xcworkspace"
    #       XCODE_SCHEME: "Runner"
    #       APP_ID: 1555555551
    #     flutter: stable
    #     xcode: 13.2
    #     cocoapods: default
    #   scripts:
    #     - name: Get Flutter Packages
    #       script: |
    #         flutter packages pub get
    #     - name: Pod install
    #       script: |
    #         find . -name "Podfile" -execdir pod install \;
    #     - name: Set up code signing settings on Xcode project
    #       script: |
    #         xcode-project use-profiles
    #     - name: Flutter build ipa and automatic versioning
    #       script: |
    #         flutter build ipa --release \
    #         --build-name=1.0.0 \
    #         --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_ID") + 1)) \
    #         --export-options-plist=/Users/builder/export_options.plist
    #   artifacts:
    #     - build/ios/ipa/*.ipa
    #     - /tmp/xcodebuild_logs/*.log
    #     - flutter_drive.log
    #     - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    #   publishing:
    #     scripts:
    #       - name: Crashlytics
    #         script: |
    #           echo "Find build artifacts"
    #           dsymPath=$(find $CM_BUILD_DIR/build/ios/archive/Runner.xcarchive -name "*.dSYM" | head -1)
    #           if [[ -z ${dsymPath} ]]
    #           then
    #             echo "No debug symbols were found, skip publishing to Firebase Crashlytics"
    #           else
    #             echo "Publishing debug symbols from $dsymPath to Firebase Crashlytics"
    #             ls -d -- ios/Pods/*
    #             $CM_BUILD_DIR/ios/Pods/FirebaseCrashlytics/upload-symbols \
    #               -gsp ios/Runner/GoogleService-Info.plist \
    #               -p ios $dsymPath
    #           fi

    # android-workflow2:
    #     name: Android Workflow
    #     max_build_duration: 120
    #     instance_type: linux_x2
    #     labels:
    #     - ${PACKAGE_NAME}
    #     environment:
    #       flutter: fvm
    #       android_signing:
    #         - testKeystore
    #       groups:
    #         - firebase_credentials
    #         - google_play_credentials2
    #       java: 11
    #       vars:
    #         PACKAGE_NAME: "io.codemagic.dtrdic6"
    #     # triggering:
    #     #   events:
    #     #       #- pull_request 
    #     #       - push
    #       # branch_patterns:
    #       # - pattern: "main"
    #       #   include: true
    #       #   source: false
    #     scripts:
    #       - name: Decode Google credentials 
    #         script: |
    #           echo $FIREBASE_SERVICE_ACCOUNT > $GOOGLE_APPLICATION_CREDENTIALS

    #       # - name: Edit JAVA OPTS
    #       #   script: |
    #       #     export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'
    #       #     # or
    #       #     # If the above code does not take effect, then export the java.xml.bind like below code.
    #       #     #export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.xml.bind'
         
    #       # - name: Install Android NDK
    #       #   script: |
    #       #       set -e
    #       #       set -x
    #       #       NDK_VERSION="android-ndk-r23c"
    #       #       NDK_URL="https://dl.google.com/android/repository/${NDK_VERSION}-linux.zip"
    #       #       NDK_DIR="android-ndk23"

    #       #       # Create the target directory
    #       #       mkdir -p ${NDK_DIR}

    #       #       # Download NDK
    #       #       curl -o ${NDK_VERSION}.zip ${NDK_URL}
    #       #       unzip -q ${NDK_VERSION}.zip -d ${NDK_DIR}
    #       #       rm ${NDK_VERSION}.zip

    #       #       # Set NDK environment variable
    #       #       export ANDROID_NDK_HOME=${NDK_DIR}/${NDK_VERSION}

    #       #       # Add NDK to PATH
    #       #       export PATH=${ANDROID_NDK_HOME}:$PATH

    #       #       # Print NDK version
    #       #       ndk-build --version

    #       # - name: SUpdate build tools with Android SDK manager
    #       #   script: |
    #       #     set -e
    #       #     set -x
    #       #     $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "build-tools;33.0.0" && cd /usr/local/share/android-sdk/build-tools/33.0.0 \
    #       #     && mv d8 dx \
    #       #     && cd lib \
    #       #     && mv d8.jar dx.jar

    #       - name: Update build tools with Android SDK manager
    #         script: |
    #           # Set the Android home directory
    #           ANDROID_HOME="$HOME/android-sdk"

    #           # Set the download URL and file name
    #           SDK_TOOLS_VERSION="6200805"
    #           SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-${SDK_TOOLS_VERSION}_latest.zip"
    #           SDK_TOOLS_FILE="sdk-tools.zip"

    #           # Create the command-line tools directory
    #           CMDLINE_TOOLS_DIR="${ANDROID_HOME}/command-line-tools"
    #           mkdir -p "${CMDLINE_TOOLS_DIR}"

    #           # Download the SDK Command-line Tools
    #           curl -o "${SDK_TOOLS_FILE}" "${SDK_TOOLS_URL}"

    #           # Unpack the SDK Command-line Tools to the appropriate directory
    #           unzip -q "${SDK_TOOLS_FILE}" -d "${CMDLINE_TOOLS_DIR}"

    #           # Clean up the downloaded zip file
    #           rm "${SDK_TOOLS_FILE}"

    #           # Set the environment variables
    #           export ANDROID_SDK_ROOT="${CMDLINE_TOOLS_DIR}"
    #           export PATH="${ANDROID_SDK_ROOT}/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}"


    #       - name: Set up local.properties
    #         script: |
    #           echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
    #       - name: Get Flutter packages
    #         script: |
    #           flutter packages pub get


    #       - name: Build AAB with Flutter
    #         script: |
    #           BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))
    #           flutter build appbundle --release \
    #             --build-name=1.0.$BUILD_NUMBER \
    #             --build-number=$BUILD_NUMBER
    #     artifacts:
    #       - build/**/outputs/**/*.aab
    #       - build/**/outputs/**/mapping.txt
    #       - flutter_drive.log
    #     publishing:
    #       firebase:
    #           firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
    #           android:
    #             app_id: 1:1037460898728:android:d0779b82fdcb0f3e95539d
    #       # google_play:
    #       #   credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS2
    #       #   track: internal
    #       #   submit_as_draft: true
